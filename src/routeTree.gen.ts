/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as AboutImport } from './routes/about';
import { Route as AuthImport } from './routes/_auth';
import { Route as SplatImport } from './routes/$';
import { Route as IndexImport } from './routes/index';
import { Route as AuthPrivateImport } from './routes/_auth/private';

// Create/Update Routes

const AboutRoute = AboutImport.update({
	path: '/about',
	getParentRoute: () => rootRoute,
} as any);

const AuthRoute = AuthImport.update({
	id: '/_auth',
	getParentRoute: () => rootRoute,
} as any);

const SplatRoute = SplatImport.update({
	path: '/$',
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	path: '/',
	getParentRoute: () => rootRoute,
} as any);

const AuthPrivateRoute = AuthPrivateImport.update({
	path: '/private',
	getParentRoute: () => AuthRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
	interface FileRoutesByPath {
		'/': {
			id: '/';
			path: '/';
			fullPath: '/';
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		'/$': {
			id: '/$';
			path: '/$';
			fullPath: '/$';
			preLoaderRoute: typeof SplatImport;
			parentRoute: typeof rootRoute;
		};
		'/_auth': {
			id: '/_auth';
			path: '';
			fullPath: '';
			preLoaderRoute: typeof AuthImport;
			parentRoute: typeof rootRoute;
		};
		'/about': {
			id: '/about';
			path: '/about';
			fullPath: '/about';
			preLoaderRoute: typeof AboutImport;
			parentRoute: typeof rootRoute;
		};
		'/_auth/private': {
			id: '/_auth/private';
			path: '/private';
			fullPath: '/private';
			preLoaderRoute: typeof AuthPrivateImport;
			parentRoute: typeof AuthImport;
		};
	}
}

// Create and export the route tree

interface AuthRouteChildren {
	AuthPrivateRoute: typeof AuthPrivateRoute;
}

const AuthRouteChildren: AuthRouteChildren = {
	AuthPrivateRoute: AuthPrivateRoute,
};

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren);

export interface FileRoutesByFullPath {
	'/': typeof IndexRoute;
	'/$': typeof SplatRoute;
	'': typeof AuthRouteWithChildren;
	'/about': typeof AboutRoute;
	'/private': typeof AuthPrivateRoute;
}

export interface FileRoutesByTo {
	'/': typeof IndexRoute;
	'/$': typeof SplatRoute;
	'': typeof AuthRouteWithChildren;
	'/about': typeof AboutRoute;
	'/private': typeof AuthPrivateRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	'/': typeof IndexRoute;
	'/$': typeof SplatRoute;
	'/_auth': typeof AuthRouteWithChildren;
	'/about': typeof AboutRoute;
	'/_auth/private': typeof AuthPrivateRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: '/' | '/$' | '' | '/about' | '/private';
	fileRoutesByTo: FileRoutesByTo;
	to: '/' | '/$' | '' | '/about' | '/private';
	id: '__root__' | '/' | '/$' | '/_auth' | '/about' | '/_auth/private';
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	SplatRoute: typeof SplatRoute;
	AuthRoute: typeof AuthRouteWithChildren;
	AboutRoute: typeof AboutRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	SplatRoute: SplatRoute,
	AuthRoute: AuthRouteWithChildren,
	AboutRoute: AboutRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$",
        "/_auth",
        "/about"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$": {
      "filePath": "$.tsx"
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/private"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/_auth/private": {
      "filePath": "_auth/private.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
